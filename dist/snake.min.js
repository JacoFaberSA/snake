/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/snake.scss":
/*!************************!*\
  !*** ./src/snake.scss ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://snake/./src/snake.scss?");

/***/ }),

/***/ "./src/snake.js":
/*!**********************!*\
  !*** ./src/snake.js ***!
  \**********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _snake_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./snake.scss */ \"./src/snake.scss\");\n/* module decorator */ module = __webpack_require__.hmd(module);\n\r\n\r\nclass SnakeGame {\r\n  static _instance = null;\r\n\r\n  static get instance() {\r\n    if (this._instance == null) {\r\n      this._instance = new SnakeGame();\r\n    }\r\n    return this._instance;\r\n  }\r\n\r\n  domHandler = new SnakeGameDomHandler(\"#snake\", this);\r\n  eventHandler = new SnakeGameEventHandler();\r\n  swipeDetector = new SnakeGameSwipeDetector();\r\n\r\n  _timer = null;\r\n\r\n  _settings = null;\r\n  _defaultSettings = {\r\n    bestScore: 0,\r\n    colorPallette: {\r\n      menu: \"rgb(11, 96, 176)\",\r\n      board: \"rgb(0, 0, 0)\",\r\n      snake: \"rgb(64, 162, 216)\",\r\n      food: \"rgb(240, 237, 207)\",\r\n      text: \"rgb(255, 255, 255)\",\r\n    },\r\n  };\r\n  _state = null;\r\n  _defaultState = {\r\n    running: false,\r\n    difficulty: 5,\r\n    score: 0,\r\n    food: null,\r\n    player: {\r\n      heading: \"right\",\r\n      body: [{ x: 0, y: 0 }], // Start in the center of the board\r\n    },\r\n  };\r\n\r\n  get state() {\r\n    if (this._state == null) {\r\n      try {\r\n        if (typeof atob == \"undefined\" || typeof localStorage == \"undefined\") {\r\n          throw Error(\"atob or localStorage is not available.\");\r\n        }\r\n\r\n        this._state =\r\n          JSON.parse(atob(localStorage.getItem(\"snake-state\"))) ||\r\n          this._defaultState;\r\n      } catch (e) {\r\n        this._state = this._defaultState;\r\n      }\r\n\r\n      // If the state is loaded from local storage, and the state is running, pause the game\r\n      if (this._state.running) {\r\n        this.pause();\r\n      }\r\n    }\r\n    return this._state;\r\n  }\r\n\r\n  set state(value) {\r\n    this._state = { ...this.state, ...value };\r\n\r\n    try {\r\n      if (typeof btoa == \"undefined\" || typeof localStorage == \"undefined\") {\r\n        throw Error(\"btoa or localStorage is not available.\");\r\n      }\r\n\r\n      localStorage.setItem(\"snake-state\", btoa(JSON.stringify(this._state)));\r\n    } catch (e) {\r\n      console.error(\"Failed to save state:\", e);\r\n    }\r\n\r\n    this.emit(\"state\", this.state);\r\n  }\r\n\r\n  get settings() {\r\n    if (this._settings == null) {\r\n      try {\r\n        if (typeof atob == \"undefined\" || typeof localStorage == \"undefined\") {\r\n          throw Error(\"atob or localStorage is not available.\");\r\n        }\r\n\r\n        this._settings =\r\n          JSON.parse(atob(localStorage.getItem(\"snake-settings\"))) ||\r\n          this._defaultSettings;\r\n      } catch (e) {\r\n        this._settings = this._defaultSettings;\r\n      }\r\n    }\r\n    return this._settings;\r\n  }\r\n\r\n  set settings(value) {\r\n    this._settings = { ...this.settings, ...value };\r\n\r\n    try {\r\n      if (typeof btoa == \"undefined\" || typeof localStorage == \"undefined\") {\r\n        throw Error(\"btoa or localStorage is not available.\");\r\n      }\r\n\r\n      localStorage.setItem(\r\n        \"snake-settings\",\r\n        btoa(JSON.stringify(this._settings))\r\n      );\r\n    } catch (e) {\r\n      console.error(\"Failed to save settings:\", e);\r\n    }\r\n\r\n    this.emit(\"state\", this.settings);\r\n  }\r\n\r\n  constructor() {\r\n    // Set the color pallette\r\n    this.setColorPallette();\r\n\r\n    // If the player has previously scored restart the game\r\n    if (this.state.score > 0) {\r\n      this.domHandler.showResumeScreen();\r\n    } else {\r\n      this.state = this._defaultState;\r\n      this.domHandler.showStartScreen();\r\n    }\r\n\r\n    // Make sure that the game is not running\r\n    this.state = { running: false };\r\n\r\n    this.domHandler.on(\"click\", \"#snake-game-start-button\", () => this.start());\r\n    this.domHandler.on(\"click\", \"#snake-game-restart-button\", () =>\r\n      this.restart()\r\n    );\r\n    this.domHandler.on(\"click\", \"#snake-game-pause-button\", () => this.pause());\r\n\r\n    // Update the heading when the user swipes\r\n    this.on(\"swipe\", (data) => {\r\n      this.state = {\r\n        player: { ...this.state.player, ...{ heading: data.direction } },\r\n      };\r\n    });\r\n  }\r\n\r\n  start() {\r\n    if (!this.state.running) {\r\n      this.setTickRate(this.state.difficulty);\r\n\r\n      this.state = { running: true };\r\n\r\n      this.domHandler.showGameBoard();\r\n\r\n      this.renderPlayer();\r\n\r\n      this.renderFood();\r\n    }\r\n\r\n    this.swipeDetector.start();\r\n    this.emit(\"start\", this.state);\r\n  }\r\n\r\n  restart() {\r\n    this.state = this._defaultState;\r\n\r\n    this.emit(\"restart\", this.state);\r\n\r\n    this.start();\r\n  }\r\n\r\n  stop() {\r\n    clearInterval(this._timer);\r\n    this.state = this._defaultState;\r\n\r\n    this.swipeDetector.stop();\r\n    this.emit(\"stop\", this.state);\r\n  }\r\n\r\n  pause() {\r\n    clearInterval(this._timer);\r\n    this.state = { running: false };\r\n    this.swipeDetector.stop();\r\n\r\n    this.domHandler.showResumeScreen();\r\n\r\n    this.emit(\"pause\", this.state);\r\n  }\r\n\r\n  tick() {\r\n    // Move the snake\r\n    const head = { ...this.state.player.body[0] };\r\n    switch (this.state.player.heading) {\r\n      case \"up\":\r\n        head.y -= 10;\r\n        break;\r\n      case \"right\":\r\n        head.x += 10;\r\n        break;\r\n      case \"down\":\r\n        head.y += 10;\r\n        break;\r\n      case \"left\":\r\n        head.x -= 10;\r\n        break;\r\n    }\r\n\r\n    this.state = {\r\n      player: {\r\n        ...this.state.player,\r\n        body: [head, ...this.state.player.body.slice(0, -1)],\r\n      },\r\n    };\r\n\r\n    const board = this.domHandler.board;\r\n\r\n    // Clear the snake\r\n    board.fillStyle = this.settings.colorPallette.board;\r\n    board.fillRect(\r\n      0,\r\n      0,\r\n      this.domHandler._canvas.width,\r\n      this.domHandler._canvas.height\r\n    );\r\n\r\n    this.renderPlayer();\r\n\r\n    // If there is no food on the board then spawn one in randomly\r\n    if (this.state.food == null) {\r\n      this.addFood();\r\n    }\r\n\r\n    // If the head is outside the game screen, the player dies\r\n    if (\r\n      this.state.player.body[0].x >= this.domHandler._canvas.width ||\r\n      this.state.player.body[0].x < 0 ||\r\n      this.state.player.body[0].y >= this.domHandler._canvas.height ||\r\n      this.state.player.body[0].y < 0\r\n    ) {\r\n      this.gameOver();\r\n    }\r\n\r\n    // If the head is inside the any of the player body pieces, the player dies\r\n    this.state.player.body.forEach((part, index) => {\r\n      if (index == 0) {\r\n        return;\r\n      }\r\n\r\n      if (\r\n        part.x == this.state.player.body[0].x &&\r\n        part.y == this.state.player.body[0].y\r\n      ) {\r\n        this.gameOver();\r\n      }\r\n    });\r\n\r\n    // If the head is on a food piece then add to the score, add a body piece\r\n    // If there is no food, create a food piece\r\n    if (this.state.food != null) {\r\n      if (\r\n        this.state.food.x == this.state.player.body[0].x &&\r\n        this.state.food.y == this.state.player.body[0].y\r\n      ) {\r\n        this.eat();\r\n      }\r\n    }\r\n\r\n    this.renderFood();\r\n\r\n    this.emit(\"tick\", this.state);\r\n  }\r\n\r\n  gameOver() {\r\n    this.domHandler.showStartScreen(true);\r\n\r\n    this.emit(\"gameOver\", this.state);\r\n\r\n    this.stop();\r\n  }\r\n\r\n  renderPlayer() {\r\n    const board = this.domHandler.board;\r\n\r\n    board.fillStyle = this.settings.colorPallette.snake;\r\n    this.state.player.body.forEach((part) => {\r\n      board.fillRect(part.x, part.y, 10, 10);\r\n    });\r\n\r\n    this.emit(\"renderPlayer\", this.state);\r\n  }\r\n\r\n  addFood() {\r\n    const randomizeFood = () => {\r\n      return {\r\n        x:\r\n          Math.floor(\r\n            Math.floor(Math.random() * this.domHandler._canvas.width) / 10\r\n          ) * 10,\r\n        y:\r\n          Math.floor(\r\n            Math.floor(Math.random() * this.domHandler._canvas.height) / 10\r\n          ) * 10,\r\n      };\r\n    };\r\n\r\n    let food = randomizeFood();\r\n\r\n    const foodPositionIsValid = () => {\r\n      // Ensure food is placed inside the game board\r\n      if (\r\n        food.x < 0 ||\r\n        food.x >= this.domHandler._canvas.width ||\r\n        food.y < 0 ||\r\n        food.x >= this.domHandler._canvas.height\r\n      ) {\r\n        return false;\r\n      }\r\n      // Ensure food is not placed in the player\r\n      for (let i = 0; i > this.state.player.body.length; i++) {\r\n        let part = this.state.player.body[i];\r\n        if (part.x == food.x && part.y == food.y) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    };\r\n\r\n    while (!foodPositionIsValid()) {\r\n      food = randomizeFood();\r\n    }\r\n\r\n    this.state = {\r\n      food: food,\r\n    };\r\n\r\n    this.emit(\"addFood\", this.state);\r\n  }\r\n\r\n  renderFood() {\r\n    if (this.state.food != null) {\r\n      const board = this.domHandler.board;\r\n      board.fillStyle = this.settings.colorPallette.food;\r\n      board.fillRect(this.state.food.x, this.state.food.y, 10, 10);\r\n      this.emit(\"renderFood\", this.state);\r\n    }\r\n  }\r\n\r\n  // Set the game speed. Max is 100 (equates 500ms)\r\n  setTickRate(rate = 5) {\r\n    clearInterval(this._timer);\r\n\r\n    this.state = { difficulty: rate };\r\n\r\n    this._timer = setInterval(\r\n      () => this.tick(),\r\n      Math.max(500, 1000 - rate * 5)\r\n    );\r\n\r\n    this.emit(\"setTickRate\", this.state);\r\n  }\r\n\r\n  eat() {\r\n    if (this.state.food == null) {\r\n      return;\r\n    }\r\n\r\n    this.state.player.body.push({\r\n      x: this.state.food.x,\r\n      y: this.state.food.y,\r\n    });\r\n\r\n    this.state = {\r\n      food: null,\r\n      score: this.state.score + 1,\r\n      player: {\r\n        ...this.state.player,\r\n        body: this.state.player.body,\r\n      },\r\n    };\r\n\r\n    // If the score is higher than the high score update the high score\r\n    if (this.state.score > this.settings.bestScore) {\r\n      this.settings = { bestScore: this.state.score };\r\n      this.emit(\"bestScore\", this.settings);\r\n    }\r\n\r\n    // Increase the difficulty every 5 points\r\n    this.setTickRate(Math.floor(this.state.score / 5) * 5);\r\n\r\n    this.emit(\"eat\", this.state);\r\n  }\r\n\r\n  setColorPallette(colorPallette) {\r\n    if (\r\n      colorPallette &&\r\n      (!\"menu\" in colorPallette ||\r\n        !\"board\" in colorPallette ||\r\n        !\"snake\" in colorPallette ||\r\n        !\"food\" in colorPallette ||\r\n        !\"text\" in colorPallette)\r\n    ) {\r\n      console.error(\"Invalid color pallette\");\r\n    }\r\n\r\n    if (colorPallette) {\r\n      this.settings = { colorPallette: colorPallette };\r\n    }\r\n\r\n    document.querySelector(\"body\").style =\r\n      `--snake-game-menu: ${this.settings.colorPallette.menu};` +\r\n      `--snake-game-board: ${this.settings.colorPallette.board};` +\r\n      `--snake-game-snake: ${this.settings.colorPallette.snake};` +\r\n      `--snake-game-food: ${this.settings.colorPallette.food};` +\r\n      `--snake-game-text: ${this.settings.colorPallette.text};`;\r\n  }\r\n\r\n  on(event, handler) {\r\n    this.eventHandler.on(event, handler);\r\n  }\r\n\r\n  emit(event, data) {\r\n    console.debug(\"Event:\", event, data);\r\n    this.eventHandler.emit(event, data);\r\n  }\r\n}\r\n\r\nclass SnakeGameEventHandler {\r\n  _listeners = {};\r\n\r\n  on(event, handler) {\r\n    if (!this._listeners[event]) {\r\n      this._listeners[event] = [];\r\n    }\r\n    this._listeners[event].push(handler);\r\n  }\r\n\r\n  emit(event, data) {\r\n    if (this._listeners[event]) {\r\n      this._listeners[event].forEach((handler) => handler(data));\r\n    }\r\n  }\r\n}\r\n\r\nclass SnakeGameDomHandler {\r\n  _container = null;\r\n  _canvas = null;\r\n  _controls = null;\r\n\r\n  _game = null;\r\n\r\n  constructor(selector, game) {\r\n    this._container = document.querySelector(selector);\r\n    this._game = game;\r\n\r\n    if (!this._container) {\r\n      throw new Error(\"Container not found\");\r\n    }\r\n  }\r\n\r\n  showStartScreen(restart = false) {\r\n    this._canvas = null;\r\n\r\n    this._container.innerHTML = `\r\n      <div class=\"snake-intro\">\r\n        <h1>${restart ? \"Game over!\" : \"Snake\"}</h1>\r\n        <div>\r\n          ${restart ? 'Score: <span id=\"snake-game-score\">0</span> | ' : \"\"}\r\n          Best${\r\n            restart ? \"\" : \" Score\"\r\n          }: <span id=\"snake-game-best-score\">0</span>\r\n        </div>\r\n        <button id=\"snake-game-start-button\">${\r\n          restart ? \"Play again!\" : \"Play!\"\r\n        }</button>\r\n      </div>\r\n    `;\r\n\r\n    if (restart) {\r\n      this._container.querySelector(\"#snake-game-score\").innerText =\r\n        this._game.state.score;\r\n    }\r\n    this._container.querySelector(\"#snake-game-best-score\").innerText =\r\n      this._game.settings.bestScore;\r\n\r\n    window.addEventListener(\"resize\", () => {\r\n      if (this._canvas) {\r\n        this._canvas.width = this._container.clientWidth;\r\n      }\r\n    });\r\n  }\r\n\r\n  showResumeScreen() {\r\n    this._canvas = null;\r\n\r\n    this._container.innerHTML = `\r\n      <div class=\"snake-intro\">\r\n        <h5>Snake</h5>\r\n        <h1>Resume</h1>\r\n        <div>\r\n          Score: <span id=\"snake-game-score\">0</span> | \r\n          Best: <span id=\"snake-game-best-score\">0</span>\r\n        </div>\r\n        <button id=\"snake-game-start-button\">Resume</button>\r\n        <button id=\"snake-game-restart-button\">Restart</button>\r\n      </div>\r\n    `;\r\n\r\n    this._container.querySelector(\"#snake-game-score\").innerText =\r\n      this._game.state.score;\r\n\r\n    this._container.querySelector(\"#snake-game-best-score\").innerText =\r\n      this._game.settings.bestScore;\r\n\r\n    window.addEventListener(\"resize\", () => {\r\n      if (this._canvas) {\r\n        this._canvas.width = this._container.clientWidth;\r\n      }\r\n    });\r\n  }\r\n\r\n  showGameBoard() {\r\n    this._container.innerHTML = `\r\n      <div class=\"snake-game\">\r\n        <canvas id=\"snake-canvas\"></canvas>\r\n      </div>\r\n    `;\r\n\r\n    this.showControls();\r\n\r\n    this._canvas = this._container.querySelector(\"#snake-canvas\");\r\n\r\n    // Set the canvas size to the container size\r\n    this._canvas.width = this._container.clientWidth;\r\n    this._canvas.height = this._container.clientHeight;\r\n\r\n    // Draw the game board\r\n    const board = this.board;\r\n    board.fillStyle = this._game.settings.colorPallette.board;\r\n    board.fillRect(0, 0, this._canvas.width, this._canvas.height);\r\n  }\r\n\r\n  showControls() {\r\n    this._controls = new DOMParser().parseFromString(\r\n      `<div class=\"snake-game-controls\">\r\n        <div>\r\n          Score: <span id=\"snake-game-score\">0</span> | \r\n          Best: <span id=\"snake-game-best-score\">0</span>\r\n        </div>\r\n        <button id=\"snake-game-pause-button\">Pause</button>\r\n      </div>`,\r\n      \"text/html\"\r\n    ).body.firstChild;\r\n\r\n    this._controls.querySelector(\"#snake-game-score\").innerText =\r\n      this._game.state.score;\r\n\r\n    this._controls.querySelector(\"#snake-game-best-score\").innerText =\r\n      this._game.settings.bestScore;\r\n\r\n    this._game.on(\"eat\", (state) => {\r\n      this._controls.querySelector(\"#snake-game-score\").innerText = state.score;\r\n    });\r\n\r\n    this._game.on(\"bestScore\", (settings) => {\r\n      this._controls.querySelector(\"#snake-game-best-score\").innerText =\r\n        settings.bestScore;\r\n    });\r\n\r\n    this._container.prepend(this._controls);\r\n  }\r\n\r\n  get board() {\r\n    if (this._canvas != null) {\r\n      return this._canvas.getContext(\"2d\");\r\n    }\r\n    return {};\r\n  }\r\n\r\n  on(event, selector, handler) {\r\n    this._container.addEventListener(event, (e) => {\r\n      if (e.target.matches(selector)) {\r\n        handler(e);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nclass SnakeGameSwipeDetector {\r\n  _startX = 0;\r\n  _startY = 0;\r\n  _endX = 0;\r\n  _endY = 0;\r\n\r\n  start() {\r\n    this._startX = 0;\r\n    this._startY = 0;\r\n    this._endX = 0;\r\n    this._endY = 0;\r\n\r\n    window.addEventListener(\"touchstart\", this._touchStart);\r\n    window.addEventListener(\"touchend\", this._touchEnd);\r\n    window.addEventListener(\"keyup\", this._keyUp);\r\n  }\r\n\r\n  stop() {\r\n    window.removeEventListener(\"touchstart\", this._touchStart);\r\n    window.removeEventListener(\"touchend\", this._touchEnd);\r\n    window.removeEventListener(\"keyup\", this._keyUp);\r\n\r\n    this._startX = 0;\r\n    this._startY = 0;\r\n    this._endX = 0;\r\n    this._endY = 0;\r\n  }\r\n\r\n  _keyUp(e) {\r\n    switch (e.key) {\r\n      case \"w\":\r\n      case \"ArrowUp\":\r\n        SnakeGame.instance.emit(\"swipe\", { direction: \"up\" });\r\n        break;\r\n      case \"d\":\r\n      case \"ArrowRight\":\r\n        SnakeGame.instance.emit(\"swipe\", { direction: \"right\" });\r\n        break;\r\n      case \"s\":\r\n      case \"ArrowDown\":\r\n        SnakeGame.instance.emit(\"swipe\", { direction: \"down\" });\r\n        break;\r\n      case \"ArrowLeft\":\r\n      case \"a\":\r\n        SnakeGame.instance.emit(\"swipe\", { direction: \"left\" });\r\n        break;\r\n    }\r\n  }\r\n\r\n  _touchStart(e) {\r\n    if (!e.target.matches(\"#snake-canvas\")) {\r\n      return;\r\n    }\r\n\r\n    this._startX = e.touches[0].clientX;\r\n    this._startY = e.touches[0].clientY;\r\n  }\r\n\r\n  _touchEnd(e) {\r\n    if (!e.target.matches(\"#snake-canvas\")) {\r\n      return;\r\n    }\r\n\r\n    this._endX = e.changedTouches[0].clientX;\r\n    this._endY = e.changedTouches[0].clientY;\r\n\r\n    const deltaX = this._endX - this._startX;\r\n    const deltaY = this._endY - this._startY;\r\n\r\n    if (Math.abs(deltaX) > Math.abs(deltaY)) {\r\n      if (deltaX > 0) {\r\n        SnakeGame.instance.emit(\"swipe\", { direction: \"right\" });\r\n      } else {\r\n        SnakeGame.instance.emit(\"swipe\", { direction: \"left\" });\r\n      }\r\n    } else {\r\n      if (deltaY > 0) {\r\n        SnakeGame.instance.emit(\"swipe\", { direction: \"down\" });\r\n      } else {\r\n        SnakeGame.instance.emit(\"swipe\", { direction: \"up\" });\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nif ( true && module.exports) {\r\n  module.exports = SnakeGame;\r\n} else {\r\n  window.SnakeGame = SnakeGame;\r\n}\r\n\n\n//# sourceURL=webpack://snake/./src/snake.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/harmony module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.hmd = (module) => {
/******/ 			module = Object.create(module);
/******/ 			if (!module.children) module.children = [];
/******/ 			Object.defineProperty(module, 'exports', {
/******/ 				enumerable: true,
/******/ 				set: () => {
/******/ 					throw new Error('ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: ' + module.id);
/******/ 				}
/******/ 			});
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/snake.js");
/******/ 	
/******/ })()
;